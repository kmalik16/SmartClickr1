// Generated by CoffeeScript 1.3.3
(function() {
  var Builder, Server, argument_parser, cli_action, fs, open_target_file, path, style, terminal,
    __slice = [].slice;

  Server = require('../lib/server');

  Builder = require('../lib/builder');

  cli_action = require('../lib/cli_action');

  style = require('../lib/style');

  path = require('path');

  terminal = require('color-terminal');

  fs = require('fs');

  open_target_file = function(targets_filepath) {
    var line, lines, target, targets, targets_content, _i, _len, _results;
    targets_content = fs.readFileSync(targets_filepath, 'utf-8');
    lines = targets_content.split("\n");
    targets = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        _results.push(line.trim());
      }
      return _results;
    })();
    _results = [];
    for (_i = 0, _len = targets.length; _i < _len; _i++) {
      target = targets[_i];
      if (target) {
        _results.push(target);
      }
    }
    return _results;
  };

  argument_parser = cli_action({
    serve: {
      handle: function(options) {
        var builder, server;
        builder = new Builder({
          makefile_path: options.makefile,
          build_path: options.dest
        });
        server = new Server({
          host: options.host,
          port: options.port,
          build_path: options.dest,
          builder: builder
        });
        server.run();
        terminal.write("Listening on ");
        return terminal.color(style.URL).write(server.url()).reset().nl();
      },
      options: function() {
        return this.options('f', {
          alias: 'makefile',
          "default": void 0
        }).describe("f", "Use a custom Makefile.").options('p', {
          alias: 'port',
          "default": 10000
        }).describe("p", "ReadyMade Server port.").options('h', {
          alias: 'host',
          "default": 'localhost'
        }).describe("h", "ReadyMade Server host.").options('d', {
          alias: 'dest',
          "default": './.readymade'
        }).describe("d", "Build directory.").usage("Usage:\n\treadymade server -h [host] -p [port] -f [Makefile]");
      },
      description: "launch readymade's http server"
    },
    build: {
      handle: function(options) {
        var builder, targets;
        builder = new Builder({
          makefile_path: options.makefile,
          build_path: options.dest
        });
        if (options.targets != null) {
          targets = open_target_file(options.targets);
        } else {
          targets = options._;
        }
        return builder.build_targets(targets, (function() {}), function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return console.log.apply(console, args);
        });
      },
      options: function() {
        this.options('f', {
          alias: 'makefile',
          "default": void 0
        }).describe("f", "Use a custom Makefile.");
        return this.options('t', {
          alias: 'targets',
          "default": null
        }).describe("t", "Target file.").options('d', {
          alias: 'dest',
          "default": '.'
        }).describe("d", "Build directory.").usage("Usage:\n\treadymade build -t target file\n\treadymade build <file1> <file2> <...>");
      },
      description: "launch readymade's http server"
    },
    help: {
      handle: function(options) {
        var action_id;
        if (options._.length === 1) {
          action_id = options._.shift();
          return this.help_on_action(action_id);
        } else {
          terminal.nl().write("  To get specific help, run :").nl().write("  # ").color({
            foreground: "blue"
          }).write("readymade help ").color(style.LABEL).write("<command>").reset().nl(2);
          return this.help();
        }
      },
      options: function() {
        return this;
      },
      description: "display help for each command"
    }
  });

  argument_parser.parse();

}).call(this);
