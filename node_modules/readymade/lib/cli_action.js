// Generated by CoffeeScript 1.3.3
(function() {
  var ActionParser, ljust, optimist, style, terminal;

  optimist = require('optimist');

  terminal = require('color-terminal');

  style = require('../lib/style');

  ljust = require('./utils').ljust;

  ActionParser = (function() {

    function ActionParser(actions) {
      this.actions = actions;
    }

    ActionParser.prototype.parse = function(argv) {
      var action, action_id, options;
      if (argv == null) {
        argv = process.argv.slice(2);
      }
      try {
        if (argv.length === 0) {
          throw "You need to specify an action.";
        } else {
          action_id = argv.shift();
          action = this.actions[action_id];
          if (action != null) {
            options = action.options.call(optimist(argv)).argv;
            return action.handle.call(this, options);
          } else {
            throw action_id + " is not a valid action.";
          }
        }
      } catch (error) {
        return this.help("! " + error);
      }
    };

    ActionParser.prototype.help_on_action = function(action_id) {
      var action, argv;
      action = this.actions[action_id];
      if (action != null) {
        argv = process.argv.slice(2);
        return console.log("\n", action.options.call(optimist(argv)).help());
      } else {
        throw "Action " + action_id + " not available";
      }
    };

    ActionParser.prototype.help = function() {
      var action_label, k, max_action_length, v, _ref;
      console.log("  Available actions are");
      max_action_length = Math.max.apply(Math, (function() {
        var _ref, _results;
        _ref = this.actions;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(k.length);
        }
        return _results;
      }).call(this));
      _ref = this.actions;
      for (k in _ref) {
        v = _ref[k];
        action_label = ljust(k, max_action_length + 3);
        terminal.color(style.LABEL).write(action_label).reset().write("   ").write(v.description).nl();
      }
      return terminal.nl();
    };

    return ActionParser;

  })();

  module.exports = function(actions) {
    return new ActionParser(actions);
  };

}).call(this);
