{
  "name": "color-terminal",
  "description": "Control your terminal colours.",
  "author": {
    "name": "Mattijs Hoitink",
    "email": "mattijs@monkeyandmachine.com",
    "url": "http://monkeyandmachine.com/"
  },
  "contributors": [
    {
      "name": "Alexander 'yumitsu' Zinchenko",
      "email": "yumitsu@mouseed.com",
      "url": "https://github.com/yumitsu/"
    },
    {
      "name": "Forgotten Labors Initiative",
      "email": "forlab-public@mouseed.com",
      "url": "https://github.com/forgotten-labors"
    }
  ],
  "homepage": "https://github.com/forgotten-labors/node-color-terminal",
  "bugs": {
    "url": "https://github.com/forgotten-labors/node-color-terminal/issues",
    "email": "forlab-public@mouseed.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/forgotten-labors/node-color-terminal.git"
  },
  "main": "color-terminal",
  "files": [
    "index.js",
    "LICENSE",
    "package.json",
    "README.md",
    "color-terminal.js"
  ],
  "version": "0.0.3-4",
  "keywords": [
    "terminal",
    "colors",
    "text"
  ],
  "readme": "# Color Terminal\n\n`color-terminal` is a small package that can be used with [node.js](http://nodejs.org) to control terminal output. The package can move the cursor in the terminal and output colored text. It can colorize a message with a simple straightforward markup syntax.\n\n# Installation and use\n\nInstall with [npm](http://npmjs.org) to current directory:\n\n```bash\n  npm -d install color-terminal .\n```\n\nOr install globally:\n\n```bash\n  npm -d -g install color-terminal\n```\n\nThen `require()` package from your script:\n\n```coffeescript\n  terminal = require('color-terminal')\n```\n\n# Examples\n\nSome examples from the `examples` directory. \n\n# Features\n\n## Colors\n\nControl colored output. See also `examples/colors.js`. Colors may vary depending on the terminal settings.\n\nSimple color changing:\n\n```coffeescript   \n  terminal.color('magenta').write('Unicorn');\n```\n\nThis will output `Unicorn` in magenta (or purple). To change the background color to magenta:\n\n```coffeescript\n  terminal.color('magenta', 'background').write('Unicorn');\n```\n\n### Color formatting\n\n`color-terminal` supports formatting strings with colors using a simple syntax. Outputting `Unicorn` in magenta (like the example above) would look like this:\n\n```coffeescript\n  terminal.colorize('%mUnicorn');\n  \n  # And changing the background color to magenta\n  terminal.colorize('%5Unicorn');\n```\n\nUsing this syntax we can create `Rainbows` easily in one line:\n\n```coffeescript\n  terminal.colorize('%rR%ma%ci%bn%yb%go%rw%n\\n');\n  \n  # Or with background colors\n  terminal.colorize('%w%1  R  %2  A  %3  I  %4  N  %5  B  %6  O  %7  W  %n ');\n```\n\nThe colorize function accepts the following modifiers:\n\n                      text      text            background\n          ------------------------------------------------\n          %k %K %0    black     dark grey       black\n          %r %R %1    red       bold red        red\n          %g %G %2    green     bold green      green\n          %y %Y %3    yellow    bold yellow     yellow\n          %b %B %4    blue      bold blue       blue\n          %m %M %5    magenta   bold magenta    magenta\n          %p %P       magenta (think: purple)\n          %c %C %6    cyan      bold cyan       cyan\n          %w %W %7    white     bold white      white\n    \n          %F     Blinking, Flashing\n          %U     Underline\n          %8     Reverse\n          %_,%9  Bold\n    \n          %n,%N  Resets the color\n          %%     A single %\n          \nMultiple effects also can be set by providing `Object` as parameter to `color()` method:\n\n```coffeescript\n  terminal.color({\"attribute\": \"bold\", \"foreground\": \"yellow\"}).write('Yellow bold text')\n```\n\nColored ouput can be reset with the `reset()` function:\n\n```coffeescript\n  terminal.color('red').write('This is red,').reset().write(' and this is not')\n```\n\n### Notice about color modifiers and `colorize()`\n\nRemember, that multiple modifiers does not requires to reset formatting before EOL.\nExample:\n\n```coffeescript\n  # 'Rainbow', thin colors.\n  terminal.colorize('%rR%ma%ci%bn%yb%go%rw%n\\n') # => 'Rainbow' in different colors\n  \n  # 'Rainbow', thin colors, bold modifier.\n  terminal.colorize('$_%rR%ma%ci%bn%yb%go%rw%n\\n') # => Bold 'Rainbow' in different colors\n  \n  # 'Rainbow', bold colors.\n  terminal.colorize('%RR%Ma%Ci%Bn%Yb%Go%Rw%n\\n') # => The same.\n```\n\nSo, as you see, you don't need to output reset modifiers every time you colored text.\nBetter practice will be use of `reset()` method called next to `colorize()`:\n\n```coffeescript\n  # Best practice\n  terminal.colorize('%RR%Ma%Ci%Bn%Yb%Go%Rw').reset()\n```\n\n### String\\#color()\n\nYou can use color formatting with `String` `color()` method. Example:\n\n```coffeescript\n  # String#color() accepts three parameters: foreground(text) color, background color and style attribute.\n  \"string\".color('white', 'red', 'blink') # => Blinking white string 'string' with red background\n  \n  # If you need just to set foreground color and style and not the background, pass null or empty string to param:\n  \"another string\".color('blue', null, 'bold') # => Is equivalent to:\n  \"another string\".color('blue', '', 'bold')\n```\n\n### Cursor control\n\n`color-terminal` provides methods for terminal cursor positioning. It can be usable in situations when you need strict text formatting. Example:\n\n```coffeescript\n  # 'move()' function uses left top corner as (0,0) origin, so (5,7) coords means that resulting point\n  # will be placed 5 symbols from the top corner and 7 symbols from the left corner.\n  #\n  # To reset terminal, you can use 'reset()' and 'clear()' methods.\n  terminal.move(5, 7).color('red').write('*').reset().clear() \n```\n\n`color-terminal` also contains shorthand methods for cursor positioning that help to avoid geometric mess with 'move()' method:\n\n```coffeescript\n  # Places cursor 10 symbols up from the bottom corner.\n  terminal.up(10).write('yay!')\n  \n  # Places cursor 2 symbols down from the current position.\n  terminal.down(2).write('down')\n  \n  # Places cursor 4 symbols right from the current position.\n  terminal.right(2).write('padding')\n  \n  # Places cursor 6 symbols left from the current position.\n  terminal.left(6).write('left-left')\n```\n\n### 'Cleaners'\n\nUseful methods to clear contents from terminal.\n\n```coffeescript\n  # Clear all characters from the terminal\n  terminal.clear()\n  \n  # Clear the line the cursor is at\n  terminal.clearLine()\n  \n  # Clear the next `n` characters from the current cursor position. In current example method will clear six characters.\n  terminal.clearCharacters(6) # => equals terminal.write(new Array(6 + 2).join(' ')).left(6 + 2)\n```\n\n### Other methods\n\n```coffeescript\n  # Write the `n` new lines.\n  terminal.nl(2)  # => \"\\n\\n\"\n  \n  # Write the `n` tabulation characters.\n  terminal.tab(4) # => \"\\t\\t\\t\\t\"\n```\n\n# Credits\n\nOriginal package by Mattijs Hoitink.\n\n* [mattijs@GitHub](https://github.com/mattijs) — GitHub profile.\n* [mattijs/node-terminal](https://github.com/mattijs/node-terminal) — original package.\n* [monkeyandmachine](http://monkeyandmachine.com) — author's blog.\n\nThis fork of the package maintained and developed by [Forgotten Labors Initiative](https://forgotten-labors.github.com).\n\n# License\n\n`color-terminal` is licensed under the [MIT License](http://opensource.org/licenses/mit-license.php).\n\n",
  "readmeFilename": "README.md",
  "_id": "color-terminal@0.0.3-4",
  "dist": {
    "shasum": "50618dced37fcc9dcf4dd44daca3614116ba3d78"
  },
  "_from": "color-terminal@0.0.3-4"
}
